// g++ heinto.cpp -o heinto & heinto
#include<bits/stdc++.h>
#include<iostream>
using namespace std;
#define MP make_pair
typedef long long ll;
typedef vector<int> vi;
typedef pair<int,int> pii;
void test();
void build(int* arr,int* tree,int ss,int se,int index)
{
 if(ss==se){
     tree[index]=arr[ss];
 return;
 }
int mid=(ss+se)/2;
build(arr,tree,ss,mid,2*index);
build(arr,tree,mid+1,se,2*index+1);
tree[index]=min(tree[2*index],tree[2*index+1]);
return;
}
int query(int tree[],int ss,int se,int l,int r,int index)
{	if(ss>r || se<l)return INT_MAX;
	if(ss>=l && se<=r)return tree[index];
int mid=(ss+se)/2;
int l1=query(tree,ss,mid,  l,r,2*index);
int r1=query(tree,mid+1,se,l,r,2*index+1);
return min(l1,r1);
}
void update(int tree[],int ss,int se,int i,int inc,int index)
{
if(ss>i || se<i)return;
if(ss==se ){
    tree[index]=inc;
return;
}
int mid=(ss+se)/2;
update(tree,ss,mid,i,inc,2*index);
update(tree,mid+1,se,i,inc,2*index+1);
tree[index]=min(tree[2*index],tree[2*index+1]);
}
int main()
{
//freopen("input.in","r",stdin);freopen("output.in","w",stdout);
int t=1;
//   cin>>t;
for(int i=1;i<=t;i++)
{    
//	cout<<"Case #"<<i<<": ";
	test();
cout<<endl;
}
return 0;
}
void test() 
{int n,q;
cin>>n>>q;
int arr[n]={};
for(int i=0;i<n;i++)
cin>>arr[i];
   int *tree = new int[4*n+100];
build(arr,tree,0,n-1,1);
//for(int i=1;i<13;i++)
//cout<<tree[i]<<" ";
while(q--)
{int type;
cin>>type;
if(type==1)
{int l,r;
cin>>l>>r;
l--;r--;
//cout<<endl;
    cout<<query(tree,0,n-1,l,r,1)<<"\n";
}
else
{int i,inc;
cin>>i>>inc;
i--;
update(tree,0,n-1,i,inc,1);
}
}
}
